<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hao</title>
  
  <subtitle>the blog of Hao</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-15T14:46:37.691Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Wang Hao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rust闭包的三种特征FnOnce、FnMut、Fn及其之间的关系</title>
    <link href="http://example.com/archives/18e952a5.html"/>
    <id>http://example.com/archives/18e952a5.html</id>
    <published>2023-12-15T14:09:29.000Z</published>
    <updated>2023-12-15T14:46:37.691Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>&emsp;&emsp;目前各个技术社区已经有大量的关于rust闭包介绍和使用方法，以及闭包的类型推导的描述，因此在本文中不再对这些部分进行赘述。如果想要了解这些部分，请参照<a href="https://course.rs/advance/functional-programing/closure.html#%E9%97%AD%E5%8C%85%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC">这篇文档</a>。在学习rust闭包的时候，我经常在评论区看到一些关于闭包Fn特征的提问和回答，某些见解正确但不够详尽，甚至某些见解完全歪曲了闭包特征的事实，因此本文旨在尽可能详尽且准确地描述闭包的三种特征和它们之间的关系。</p></blockquote><h2 id="闭包特征——FnOnce、FnMut、Fn"><a href="#闭包特征——FnOnce、FnMut、Fn" class="headerlink" title="闭包特征——FnOnce、FnMut、Fn"></a>闭包特征——FnOnce、FnMut、Fn</h2><p>闭包有三种特征，分别对应的是三种不同捕获变量的方式——<code>转移所有权</code>、<code>可变借用</code>、<code>不可变借用</code>。</p><h3 id="FnOnce"><a href="#FnOnce" class="headerlink" title="FnOnce"></a>FnOnce</h3><p>该类型闭包会拿走参数所有权，并且该类型闭包只能运行一次。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">fn_once</span>&lt;F&gt;(func: F)</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    F: <span class="title function_ invoke__">FnOnce</span>(<span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="title function_ invoke__">func</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="title function_ invoke__">func</span>(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="title function_ invoke__">fn_once</span>(|num| x+num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>仅</strong>实现了FnOnce特征的闭包会在执行的时候拿走参数的所有权，因此上述代码会报错；在后续中我们将提到如何解决这个问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Compiling playground v0.0.1 (/playground)</span><br><span class="line">error[E0382]: use of moved value: `func`</span><br><span class="line"> --&gt; src/main.rs:6:20</span><br><span class="line">  |</span><br><span class="line">1 | fn fn_once&lt;F&gt;(func: F)</span><br><span class="line">  |               ---- move occurs because `func` has <span class="built_in">type</span> `F`, <span class="built_in">which</span> does not implement the `Copy` trait</span><br><span class="line">...</span><br><span class="line">5 |     println!(<span class="string">&quot;&#123;&#125;&quot;</span>, func(1));</span><br><span class="line">  |                    ------- `func` moved due to this call</span><br><span class="line">6 |     println!(<span class="string">&quot;&#123;&#125;&quot;</span>, func(2));</span><br><span class="line">  |                    ^^^^ value used here after move</span><br><span class="line">  |</span><br><span class="line">note: this value implements `FnOnce`, <span class="built_in">which</span> causes it to be moved when called</span><br><span class="line"> --&gt; src/main.rs:5:20</span><br><span class="line">  |</span><br><span class="line">5 |     println!(<span class="string">&quot;&#123;&#125;&quot;</span>, func(1));</span><br><span class="line">  |                    ^^^^</span><br><span class="line"><span class="built_in">help</span>: consider further restricting this bound</span><br><span class="line">  |</span><br><span class="line">3 |     F: FnOnce(i32) -&gt; i32 + Copy,</span><br><span class="line">  |                           ++++++</span><br><span class="line"></span><br><span class="line">For more information about this error, try `rustc --explain E0382`.</span><br><span class="line">error: could not compile `playground` (bin <span class="string">&quot;playground&quot;</span>) due to previous error</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;目前各个技术社区已经有大量的关于rust闭包介绍和使用方法，以及闭包的类型推导的描述，因此在本文中不再对这些部分进行赘述。如果想要了解这些部分，请参照&lt;a href=&quot;https://course.rs/advance/fu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>结合hexo框架+next主题使用github pages搭建个人博客网站</title>
    <link href="http://example.com/archives/8bfb5ae1.html"/>
    <id>http://example.com/archives/8bfb5ae1.html</id>
    <published>2023-12-10T08:50:07.000Z</published>
    <updated>2023-12-12T02:05:34.959Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天完成了我的个人博客网站的初始化建设，搭建起来的静态网站已经初具形态，并且包括了一些常用的基本功能，在整个搭建过程中，看了不少文章，但不少文章距今已经有不少的一段时间，有不少过期的用法，导致整个搭建过程中遇到了不少阻塞，因此我觉得有必要分享一篇尽可能通用的、保质期长的文章，来尽可能保证读者在使用本文进行个人博客搭建时所遭受的阻碍更少。</p><p>&emsp;&emsp;同时我仍然感觉到在这基础上，我仍然需要一些额外的能力，因此我后续会对博客的界面和功能做持续地优化，并会将整个过程收获的心得和方法都收录到 <a href="/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/">博客建设</a> 这一分类中。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;本文分为两个部分为读者讲述如何搭建个人博客网站，第一部分是固定的操作，也就是说在一定意义上讲，该部分涉及到的操作应该是永不过时的；第二部分是需要持续更新的，随着框架（本文中指hexo、next等）的升级，相关的配置和初始化操作也可能发生改变，这部分内容会不定期地进行更新，当然上文中提到，本文旨在提供一个在任何时间都能够尽量保证读者流畅、准确地搭建个人博客的方法，因此除了详细的操作，第二部分也会配合框架的官方文档引导读者进行搭建，这样做可以最大程度保证，即使本文的内容过期，读者也可以使用官方文档进行个人博客网站的搭建。</p><p>&emsp;&emsp;下面我们就开始个人博客网站的搭建。</p><h2 id="第一部分——准备工作"><a href="#第一部分——准备工作" class="headerlink" title="第一部分——准备工作"></a>第一部分——准备工作</h2><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>node.js是git和hexo的基础运行环境，请按照node.js<a href="https://nodejs.cn/download/">官方文档</a>指示安装好node.js。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>git是github pages的管理工具，请按照git<a href="https://git-scm.com/downloads">官方文档</a>完成git的安装。</p><h3 id="Github-Pages-Repository"><a href="#Github-Pages-Repository" class="headerlink" title="Github Pages Repository"></a>Github Pages Repository</h3><p>本文将使用github pages完成博客的托管工作，这是github pages的<a href="https://docs.github.com/zh/pages/quickstart">官方介绍</a>。<br><img src="/../uploads/blog-init/github_pages.jpeg"></p><p>请读者遵照官网的quick start创建好自己的github pages仓库。</p><h2 id="第二部分——搭建博客"><a href="#第二部分——搭建博客" class="headerlink" title="第二部分——搭建博客"></a>第二部分——搭建博客</h2><blockquote><p>以下段落将指引读者使用hexo完成博客的搭建和一些简单的配置，并简单说明hexo的使用方法。</p></blockquote><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><blockquote><p>hexo是一个快速、简洁、高效的博客框架。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="初始化hexo项目"><a href="#初始化hexo项目" class="headerlink" title="初始化hexo项目"></a>初始化hexo项目</h3><blockquote><p>按照以下步骤，完成hexo项目的初始化，当然也可以按照<a href="https://hexo.io/zh-cn/docs/setup">官方文档</a>指示完成项目初始化。</p></blockquote><p>使用hexo对项目进行新建及初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，可使用 <code>ls &lt;folder&gt;</code> 或使用ide打开目录，目录结构如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p><strong>需要特别说明的是</strong>，_config.yml文件是hexo的配置文件，后面我们还可以看到其他类似的文件，为了加以区分，我们称_config.yml文件为<strong>站点配置文件</strong>。</p><h3 id="本地启动项目"><a href="#本地启动项目" class="headerlink" title="本地启动项目"></a>本地启动项目</h3><ol><li><p>使用<code>hexo generate</code><strong>生成静态文件</strong>，运行此命令后可以看到输出结果里面包含了js、css、html、xml等内容，并可以在根目录下的public目录中找到它们，这些都是被hexo转换后的博客网站的源码。</p></li><li><p>使用<code>hexo serve</code>启动hexo的server，此服务会把博客网站在本地运行起来。访问终端输出中的地址，进入博客网站。<br><img src="/../uploads/blog-init/hexo_serve.jpeg"></p></li></ol><h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><blockquote><p>hexo提供一键部署命令<code>hexo deploy</code>或<code>hexo d</code>来进行一键部署，但在运行此命令前我们需要完成一些部署配置。</p></blockquote><p>打开项目的站点配置文件（根目录下的_config.y m l）,找到Deployment的配置项，然后进行如下配置。其中将repo的地址更换为刚刚创建好的github pages仓库地址。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;your</span> <span class="string">repository</span> <span class="string">url&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>除此之外，我们还需要安装一个Git插件，名为hexo-deployer-git，部署相关的能力将由这个插件提供。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装完成之后运行<code>hexo deploy</code>或<code>hexo d</code>，会得到类似以下的输出<br><img src="/../uploads/blog-init/hexo_deploy.jpeg"></p><p>证明构建产物已经上传到了master上，这时候就可以访问github pages的链接，就可以看到博客内容了。链接和仓库名称一致，即<code>&lt;repository&gt;.github.io</code>,以我的博客举例，对应的链接应该为<a href="https://mrsnoozlebergs.github.io/">mrsnoozlebergs.github.io</a>。</p><h3 id="上传源码"><a href="#上传源码" class="headerlink" title="上传源码"></a>上传源码</h3><p>通过上述操作，我们把产物上传到了github pages仓库的master分支上，咱们访问仓库地址浏览master分支内容，可以看到实际上传到master的并不是整个仓库的内容，而是public（即generate出来的产物）的内容。因此可能有读者需要上传源码到github中。<br><img src="/../uploads/blog-init/hexo_master.jpeg"></p><p>我们可以在从当前分支新建一个分支或者直接使用当前分支（main），将该分支上传到github上用于保存源码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add -all</span><br><span class="line">git commit -m <span class="string">&quot;feat: init source branch&quot;</span></span><br><span class="line">git remote add origin git@github.com:&#123;username&#125;/&#123;username&#125;.github.io.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;今天完成了我的个人博客网站的初始化建设，搭建起来的静态网站已经初具形态，并且包括了一些常用的基本功能，在整个搭建过程中，看了不少文章，但不少文章距今已经有不少的一段时间，有不少过期的用法，导致整个搭建过程中遇到了不少阻塞，因此我觉得有必要分享一篇尽可能通用的、保质期长的文章，来尽可能保证读者在使用本文进行个人博客搭建时所遭受的阻碍更少。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;同时我仍然感觉到在这基础上，我仍然需要一些额外的能力，因此我后续会对博客的界面和功能做持续地优化，并会将整个过程收获的心得和方法都收录到 &lt;a href=&quot;/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/&quot;&gt;博客建设&lt;/a&gt; 这一分类中。&lt;/p&gt;</summary>
    
    
    
    <category term="博客建设(持续更新中)" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="next" scheme="http://example.com/tags/next/"/>
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/archives/d87f7e0b.html"/>
    <id>http://example.com/archives/d87f7e0b.html</id>
    <published>2023-12-10T02:57:20.438Z</published>
    <updated>2023-12-10T08:56:35.557Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
